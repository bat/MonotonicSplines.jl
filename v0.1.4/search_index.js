var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MonotonicSplines]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#MonotonicSplines.MonotonicSplines","page":"API","title":"MonotonicSplines.MonotonicSplines","text":"MonotonicSplines\n\nHigh-performance monotonic splines in Julia.\n\n\n\n\n\n","category":"module"},{"location":"api/#MonotonicSplines.InvRQSpline","page":"API","title":"MonotonicSplines.InvRQSpline","text":"InvRQSpline(widths::AbstractArray{<:Real}, heights::AbstractArray{<:Real}, derivatives::AbstractArray{<:Real})\n\nA struct that holds the parameters to characterize multiple inverse rational quadratic spline functions.  These functions are used to transform each component of multiple samples, providing a high-performance  solution for batch transformations.\n\nThe InvRQSpline struct is based on the scheme first defined by Gregory and Delbourgo  (https://doi.org/10.1093/imanum/2.2.123) and is designed to handle n_dims x n_samples inverse spline functions.\n\nFields\n\nwidths: A K+1 x n_dims x n_samples array that holds the width parameters for each inverse spline function.  The first dimension corresponds to the number of segments in a single spline function, the second dimension  corresponds to the inverse spline functions for a single sample, and the third dimension corresponds to the sets of  inverse splines for different samples.\nheights: A K+1 x n_dims x n_samples array that holds the height parameters for each inverse spline function.  The dimensions are organized in the same way as the widths array.\nderivatives: A K+1 x n_dims x n_samples array that holds the derivative parameters for each inverse spline function.  The dimensions are organized in the same way as the widths and heights arrays.\n\nUsage\n\nAn instance of InvRQSpline can be used like a function to apply the characterized inverse spline transformations  to the components of the samples.\n\nPerformance\n\nThe struct is designed to leverage parallel computing and automatic differentiation for high performance.  It uses KernelAbstractions.jl for parallel execution on either a CPU or a GPU, and Zygote.jl for automatic  differentiation, providing precise and efficient gradient computations.\n\nNote\n\nThe same parameters are used to characterize both the forward (RQSpline) and inverse (InvRQSpline) spline functions.  The struct used to store them determines the equation they are evaluated in.\n\n\n\n\n\n","category":"type"},{"location":"api/#MonotonicSplines.RQSpline","page":"API","title":"MonotonicSplines.RQSpline","text":"RQSpline(widths::AbstractArray{<:Real}, heights::AbstractArray{<:Real}, derivatives::AbstractArray{<:Real})\n\nA struct that holds the parameters to characterize multiple rational quadratic spline functions.  These functions are used to transform each component of multiple samples, providing a high-performance  solution for batch transformations.\n\nThe RQSpline struct is based on the scheme first defined by Gregory and Delbourgo  (https://doi.org/10.1093/imanum/2.2.123) and is designed to handle n_dims x n_samples spline functions For a batch of  n_samples n_dims-dimensional samples.\n\nFields\n\nwidths: A K+1 x n_dims x n_samples array that holds the width parameters for each spline function.  The first dimension corresponds to the number of segments in a single spline function, the second dimension  corresponds to the spline functions for a single sample, and the third dimension corresponds to the sets of  splines for different samples.\nheights: A K+1 x n_dims x n_samples array that holds the height parameters for each spline function.  The dimensions are organized in the same way as the widths array.\nderivatives: A K+1 x n_dims x n_samples array that holds the derivative parameters for each spline function.  The dimensions are organized in the same way as the widths and heights arrays.\n\nUsage\n\nAn instance of RQSpline can be used like a function to apply the characterized spline transformations  to the components of the samples.\n\nPerformance\n\nThe struct is designed to leverage parallel computing and automatic differentiation for high performance.  It uses KernelAbstractions.jl for parallel execution on either a CPU or a GPU, and different backends for automatic  differentiation, providing precise and efficient gradient computations.\n\n\n\n\n\n","category":"type"},{"location":"api/#MonotonicSplines._sort_dimensions-Tuple{AbstractArray, AbstractArray, AbstractVector}","page":"API","title":"MonotonicSplines._sort_dimensions","text":"_sort_dimensions(y₁::AbstractArray, y₂::AbstractArray, mask::AbstractVector)\n\nCreate a new array by selectively replacing rows from y₂ with corresponding rows from y₁ based on a boolean mask, mask.\n\nArguments\n\ny₁: An array from which rows are taken. It should have the same number of columns as y₂.\ny₂: An array that serves as the base for the output. Rows specified by mask are replaced with corresponding rows from y₁.\nmask: A boolean vector of the same length as the number of rows in y₁ and y₂. If the i-th element of mask is true, the i-th row of y₂ is replaced with the i-th row of y₁ in the output.\n\nReturns\n\nres: An array of the same shape as y₂, but with rows specified by mask replaced with corresponding rows from y₁.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.eval_backward_rqs_params-Union{Tuple{M3}, Tuple{M2}, Tuple{M1}, Tuple{M0}, Tuple{M0, M0, M1, M1, M2, M2, M3}} where {M0<:Real, M1<:Real, M2<:Real, M3<:Real}","page":"API","title":"MonotonicSplines.eval_backward_rqs_params","text":"eval_forward_rqs_params(wₖ::Real, wₖ₊₁::Real, hₖ::Real, hₖ₊₁::Real, dₖ::Real, dₖ₊₁::Real, x::Real)\n\nApply a rational quadratic spline segment to a number x, and calculate the logarithm of the absolute value of this function's derivative.\n\nArguments\n\nwₖ, wₖ₊₁: The width parameters of the spline segment at the edges of the k-th interval.\nhₖ, hₖ₊₁: The height parameters of the spline segment.\ndₖ, dₖ₊₁: The derivative parameters of the spline segment.\nx: The value at which the spline function is evaluated.\n\nReturns\n\ny: The transformed value after applying the rational quadratic spline segment to x.\nlogJac: The logarithm of the absolute value of the derivative of the segment at x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.eval_backward_rqs_params_with_grad-Union{Tuple{M3}, Tuple{M2}, Tuple{M1}, Tuple{M0}, Tuple{M0, M0, M1, M1, M2, M2, M3}} where {M0<:Real, M1<:Real, M2<:Real, M3<:Real}","page":"API","title":"MonotonicSplines.eval_backward_rqs_params_with_grad","text":"eval_backward_rqs_params_with_grad(wₖ::M0, wₖ₊₁::M0, \n                                   hₖ::M1, hₖ₊₁::M1, \n                                   dₖ::M2, dₖ₊₁::M2, \n                                   x::M3            ) where {M0<:Real,M1<:Real, M2<:Real, M3<:Real}\n\nApply an inverse rational quadratic spline segment to x, calculate the logarithm of the absolute value of the derivative (\"LogJac\") of the segment at x,  and compute the gradient of that segment and the LogJac with respect to the spline parameters.\n\nArguments\n\nwₖ, wₖ₊₁: The width parameters of the spline segment at the edges of the k-th interval.\nhₖ, hₖ₊₁: The height parameters of the spline segment.\ndₖ, dₖ₊₁: The derivative parameters of the spline segment.\nx: The value at which the spline function is evaluated.\n\nReturns\n\ny: The transformed value after applying the inverse rational quadratic spline segment to x.\nlogJac: The logarithm of the absolute value of the derivative of the segment at x.\n∂y∂w, ∂y∂h, ∂y∂d: The gradients of y with respect to the two width, height, and derivative parameters, respectively.\n∂LogJac∂w, ∂LogJac∂h, ∂LogJac∂d: The gradients of LogJac with respect to the two width, height, and derivative parameters, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.eval_forward_rqs_params-NTuple{7, Real}","page":"API","title":"MonotonicSplines.eval_forward_rqs_params","text":"eval_forward_rqs_params(wₖ::Real, wₖ₊₁::Real, hₖ::Real, hₖ₊₁::Real, dₖ::Real, dₖ₊₁::Real, x::Real)\n\nApply a rational quadratic spline segment to a number x, and calculate the logarithm of the absolute value of this function's Jacobian.\n\nArguments\n\nwₖ, wₖ₊₁: The width parameters of the spline segment at the edges of the k-th interval.\nhₖ, hₖ₊₁: The height parameters of the spline segment.\ndₖ, dₖ₊₁: The derivative parameters of the spline segment.\nx: The value at which the spline function is evaluated.\n\nReturns\n\ny: The transformed value after applying the rational quadratic spline segment to x.\nlogJac: The logarithm of the absolute value of the derivative of the segment at x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.eval_forward_rqs_params_with_grad-Union{Tuple{M3}, Tuple{M2}, Tuple{M1}, Tuple{M0}, Tuple{M0, M0, M1, M1, M2, M2, M3}} where {M0<:Real, M1<:Real, M2<:Real, M3<:Real}","page":"API","title":"MonotonicSplines.eval_forward_rqs_params_with_grad","text":"eval_forward_rqs_params_with_grad(wₖ::M0, wₖ₊₁::M0, hₖ::M1, hₖ₊₁::M1, dₖ::M2, dₖ₊₁::M2, x::M3) where {M0<:Real,M1<:Real, M2<:Real, M3<:Real}\n\nApply a rational quadratic spline segment to x, calculate the logarithm of the absolute value of the derivative (\"LogJac\") of the segment at x,  and compute the gradient of that segment and the LogJac with respect to the spline parameters.\n\nArguments\n\nwₖ, wₖ₊₁: The width parameters of the spline segment at the edges of the k-th interval.\nhₖ, hₖ₊₁: The height parameters of the spline segment.\ndₖ, dₖ₊₁: The derivative parameters of the spline segment.\nx: The value at which the spline function is evaluated.\n\nReturns\n\ny: The transformed value after applying the rational quadratic spline segment to x.\nlogJac: The logarithm of the absolute value of the derivative of the segment at x.\n∂y∂w, ∂y∂h, ∂y∂d: The gradients of y with respect to the two width, height, and derivative parameters, respectively.\n∂LogJac∂w, ∂LogJac∂h, ∂LogJac∂d: The gradients of logJac with respect to the two width, height, and derivative parameters, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.get_params","page":"API","title":"MonotonicSplines.get_params","text":"get_params(θ_raw::AbstractArray, n_dims_trafo::Integer, B::Real = 5.)\n\nProcess the raw output parameters of a neural network to generate parameters for a set of rational quadratic spline functions.\n\nArguments\n\nθ_raw: A matrix where each column represents the raw parameters for a sample.\nn_dims_trafo: The number of spline functions for which parameters are to be produced.\nB: A real number used to initialize the widths and heights of the spline functions. Default is 5.\n\nReturns\n\nA tuple w, h, d containing the widths, heights, and derivative parameters of the spline functions. The parameters are stored in a K+1 x n_spline_functions_per_sample x n_samples array.\n\n\n\n\n\n","category":"function"},{"location":"api/#MonotonicSplines.rqs_backward-Tuple{AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"API","title":"MonotonicSplines.rqs_backward","text":"rqs_backward(x::AbstractArray{<:Real}, w::AbstractArray{<:Real}, h::AbstractArray{<:Real}, d::AbstractArray{<:Real})\n\nApply the inverse rational quadratic spline functions, characterized by the parameters w (widths), h (heights), and d (derivatives),  to the array x.\n\nOne sample is stored in a column of the input x.\n\nArguments\n\nx: An array of real numbers to which the inverse spline functions are applied. The [i,j]-th element of x is transformed  by the inverse spline function characterized by the parameters in the [:,i,j] entries in w, h, and d.\nw, h, d: Arrays that hold the width, height, and derivative parameters of the inverse spline functions, respectively.  Each of these is a 3D array with dimensions K+1 x n_dims x n_samples.\n\nReturns\n\nTwo objects are returned:\n\ny: A matrix of the same shape as x that holds the transformed values.\nlogJac: A 1 x size(x,2) matrix that holds the sums of the values of the logarithm of the absolute values of the determinant  of the Jacobians of the inverse spline functions applied to a column of x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_backward_kernel!-Tuple{Any}","page":"API","title":"MonotonicSplines.rqs_backward_kernel!","text":"rqs_backward_kernel!(x::AbstractArray, y::AbstractArray, logJac::AbstractArray, w::AbstractArray, h::AbstractArray, d::AbstractArray)\n\nThis kernel function applies the inverse rational quadratic spline functions characterized by the parameters w, h, and d to x. \n\nArguments\n\nx: An array of real numbers to which the inverse spline functions are applied.\nw, h, d: Arrays that hold the width, height, and derivative parameters of the inverse spline functions, respectively.\ny: An array where the transformed values will be stored.\nlogJac: An array where the sums of the values of the logarithm of the absolute values of the determinant of the Jacobians of the inverse spline \n\nfunctions applied to a column of x will be stored.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_forward-Tuple{AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"API","title":"MonotonicSplines.rqs_forward","text":"rqs_forward(x::AbstractArray{<:Real}, w::AbstractArray{<:Real}, h::AbstractArray{<:Real}, d::AbstractArray{<:Real})\n\nApply the rational quadratic spline functions, characterized by the parameters w (widths), h (heights), and d (derivatives),  to the array x.\n\nOne sample is stored in a column of the input x.\n\nArguments\n\nx: An array of real numbers to which the spline functions are applied. The [i,j]-th element of x is transformed  by the spline function characterized by the parameters in the [:,i,j] entries in w, h, and d.\nw, h, d: Arrays that hold the width, height, and derivative parameters of the spline functions, respectively.  Each of these is a 3D array with dimensions K+1 x n_dims x n_samples.\n\nReturns\n\nTwo objects are returned:\n\ny: A matrix of the same shape as x that holds the transformed values.\nlogJac: A 1 x size(x,2) matrix that holds the sums of the values of the logarithm of the absolute values of the determinant  of the Jacobians of the spline functions applied to a column of x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_forward_kernel!-Tuple{Any}","page":"API","title":"MonotonicSplines.rqs_forward_kernel!","text":"rqs_forward_kernel!(x::AbstractArray, y::AbstractArray, logJac::AbstractArray, w::AbstractArray, h::AbstractArray, d::AbstractArray)\n\nThis kernel function applies the rational quadratic spline functions characterized by the parameters w, h, and d to x. \n\nArguments\n\nx: An array of real numbers to which the spline functions are applied.\nw, h, d: Arrays that hold the width, height, and derivative parameters of the spline functions, respectively.\ny: An array where the transformed values are stored.\nlogJac: An array where the sums of the values of the logarithm of the absolute values of the determinant of the Jacobians of the spline \n\nfunctions applied to a column of x are stored.\n\nDescription\n\nThe function works by applying the spline function characterized by the parameters in the [:,i,j] entries in w, h, and d to the  [i,j]-th element of x. The transformed values are stored in y and the sums of the values of the logarithm of the absolute values of  the determinant of the Jacobians of the spline functions applied to a column of x are stored in logJac.\n\nNote\n\nTo find the bin k in which the respective x value for a spline falls in, the corresponding column of w is searched.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_pullback-Tuple{Function, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"API","title":"MonotonicSplines.rqs_pullback","text":"rqs_pullback(param_eval_function::Function, x::AbstractArray{<:Real}, w::AbstractArray{<:Real}, h::AbstractArray{<:Real}, d::AbstractArray{<:Real}, tangent_1::AbstractArray, tangent_2::AbstractArray)\n\nCompute the gradients of the rational quadratic spline functions characterized by w, h, and d, evaluated at the values in x with respect to w, h, and d. \n\nThis function is designed to make the transformation using Rational Quadratic Splines in this package automatically differentiable. Whether the gradients of the forward or backward spline functions are calculated is determined by the param_eval_function argument.\n\nArguments\n\nparam_eval_function: The function used to evaluate a spline segment. Different functions are used for the forward and backward spline functions.\nx: An array of real numbers at which the spline functions are evaluated.\nw, h, d: Arrays that hold the width, height, and derivative parameters of the spline functions, respectively.\ntangent_1, tangent_2: Arrays that hold the tangent vectors for the transformed output and the log abs det jacobians respectively.\n\nReturns\n\nThree values are returned:\n\n∂y∂w + ∂LogJac∂w: An array with the same shape as w, with the [:,j,k]-th element holding the gradient of the [j,k]-th element of y with respect to the width parameters                     plus the gradient of the logarithm of the absolute value of the derivative of this [j,k]-th element of y with respect to the [j,k]-th element of x, with respect to the width parameters.                      For Example, the [i,j,k] element of this array is ∂yⱼₖ/∂wᵢⱼₖ + ∂(log(abs(∂yⱼₖ/∂xⱼₖ)))/∂wᵢⱼₖ.\n∂y∂h + ∂LogJac∂h: An array with the same shape as h, holding the same gradients as described above, but with respect to the height parameters.\n∂y∂d + ∂LogJac∂d: An array with the same shape as d, holding the same gradients as described above, but with respect to the derivative parameters.\n\nNote\n\nSince only one segment of each spline is evaluated for one element of x, the returned gradients are filled with zeros, except for the parameters of the segment that is evaluated for that element of x. For example, if the [j,k] -th element of x falls in the l-th bin of the interval mask, the [:,j,k] entries in ∂y∂w + ∂LogJac∂w are all zero, except the [l,j,k] and [l+1,j,k] elements, which hold  the (generally non-zero) values ∂yⱼₖ/∂wₗⱼₖ + ∂(log(abs(∂yⱼₖ/∂xⱼₖ)))/∂wₗⱼₖ and ∂yⱼₖ/∂wₗ₊₁ⱼₖ + ∂(log(abs(∂yⱼₖ/∂xⱼₖ)))/∂wₗ₊₁ⱼₖ respectively.\n\nThe function executes in a kernel, on the same backend as x is stored (CPU or GPU), and the output is also returned on the same backend.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_pullback_kernel!-Tuple{Any}","page":"API","title":"MonotonicSplines.rqs_pullback_kernel!","text":"rqs_pullback_kernel(\n    param_eval_function::Function,\n    x::AbstractArray,\n    y::AbstractArray,\n    logJac::AbstractArray,\n    w::AbstractArray,\n    h::AbstractArray,\n    d::AbstractArray,\n    ∂y∂w_tangent::AbstractArray,\n    ∂y∂h_tangent::AbstractArray,\n    ∂y∂d_tangent::AbstractArray,\n    ∂LogJac∂w_tangent::AbstractArray,\n    ∂LogJac∂h_tangent::AbstractArray,\n    ∂LogJac∂d_tangent::AbstractArray,\n    tangent_1::AbstractArray,\n    tangent_2::AbstractArray,\n)\n\nThis kernel function calculates the gradients of the rational quadratic spline functions characterized by w, h, and d, evaluated at the values in x and of logJac.\n\nArguments\n\nparam_eval_function The function used to evaluate a spline segment. Different functions are used for the forward and backward passes.\nx: An array of real numbers to which the spline functions are applied.\nw, h, d: Arrays that hold the width, height, and derivative parameters of the spline functions, respectively.\ny: An array where the transformed values are stored.\nlogJac: An array where the sums of the values of the logarithm of the absolute values of the determinant of the Jacobians of the spline functions applied to a column of x are stored.\n∂y∂w_tangent, ∂y∂h_tangent, ∂y∂d_tangent: Arrays that will contain the gradients of the spline functions with respect to w, h, and d, respectively.\n∂LogJac∂w_tangent, ∂LogJac∂h_tangent, ∂LogJac∂d_tangent: Arrays that will contain the gradients of logJac with respect to w, h, and d, respectively.\ntangent_1, tangent_2: Arrays that hold the tangent vectors for the forward pass.\n\nFor an explanation of the shape and contents of the gradient arrays, see the documentation of the rqs_pullback() function.\n\nNote\n\nThis function is a kernel function and is used within the rqs_forward_pullback function to calculate the gradients of the spline functions and logJac. It is not intended to be called directly by the user.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.spline_backward-Tuple{InvRQSpline, AbstractMatrix{<:Real}}","page":"API","title":"MonotonicSplines.spline_backward","text":"spline_backward(trafo::InvRQSpline, x::AbstractMatrix{<:Real})\n\nApply the inverse rational quadratic spline functions, characterized by the parameters stored in trafo, to the matrix x.\n\nThis function provides a high-performance solution for batch transformations, applying multiple inverse spline functions  to a matrix of samples simultaneously. One sample is stored in a column of the input matrix x.\n\nArguments\n\ntrafo: An instance of InvRQSpline that holds the parameters of the inverse spline functions. These parameters are widths, heights, and derivatives, each of which is a 3D array with dimensions K+1 x n_dims x n_samples.\nx: A matrix of real numbers to which the inverse spline functions are applied. The [i,j]-th element of x is transformed  by the inverse spline function characterized by the parameters in the [:,i,j] entries in the parameter arrays stored in trafo.\n\nReturns\n\nTwo objects are returned:\n\ny: A matrix of the same shape as x that holds the transformed values.\nlogJac: A 1 x size(x,2) matrix that holds the sums of the values of the logarithm of the absolute values of the determinant    of the Jacobians of the spline functions applied to a column of x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.spline_forward-Tuple{RQSpline, AbstractMatrix{<:Real}}","page":"API","title":"MonotonicSplines.spline_forward","text":"spline_forward(trafo::RQSpline, x::AbstractMatrix{<:Real})\n\nApply the rational quadratic spline functions, characterized by the parameters stored in trafo, to the matrix x.\n\nThis function provides a high-performance solution for batch transformations, applying multiple spline functions  to a matrix of samples simultaneously. One sample is stored in a column of the input matrix x.\n\nArguments\n\ntrafo: An instance of RQSpline that holds the parameters of the spline functions. These parameters are widths, heights, and derivatives, each of which is a 3D array with dimensions K+1 x n_dims x n_samples.\nx: A matrix of real numbers to which the spline functions are applied. The [i,j]-th element of x is transformed  by the spline function characterized by the parameters in the [:,i,j] entries in the parameter arrays stored in trafo.\n\nReturns\n\nTwo objects are returned:\n\ny: A matrix of the same shape as x that holds the transformed values.\nlogJac: A 1 x size(x,2) matrix that holds the sums of the values of the logarithm of the absolute values of the determinant   of the Jacobians of the spline functions applied to a column of x.\n\n\n\n\n\n","category":"method"},{"location":"introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This page provides a summarized explanation of the implementation of the rational quadratic spline functions as defined in [1]. For a comprehensive derivation and explanation of the spline function's usage, see [1] and [2].","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Rational quadratic functions are defined as the quotient of two quadratic polynomials and offer superior flexibility to other function families [1]. They are easily differentiable, and since they are constructed to be monotonous, they also are analytically invertible. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Durkan et al. construct their rational quadratic splines f from K different rational quadratic functions. The parameterization of the splines follows the method of Gregory and Delbourgo [3]. They characterize a spline by the coordinates (x_ky_k)  k = 1  K+1, of the K+1 points called \\textit{knots} in which two adjacent spline segments are joined together. The parameterization also incorporates the K-1 derivatives of the spline at the interior knots. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"limit the number of parameters needed to characterize a spline, they are defined on a finite interval","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"\n    f  -B B rightarrow -B B   textwith B in mathbbR","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Here we chose B = 50 by default, but this can be changed arbitrarily. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Gregory and Delbourgo split this -B B input domain into K bins and define each spline segment on one bin. The knots lie on the bin edges on the x-axis and at the desired y value through which the spline is supposed to pass. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"In the k-th bin (1leq k leq K), the respective spline segment f_k is defined as an expression of the coordinates (x_ky_k) and (x_k+1y_k+1) of the enclosing k -th and k+1 -st knots as well as the spline's derivatives delta_k and delta_k+1 at the knots:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    f_k  x_k x_k+1) rightarrow -BB x mapsto y_k + frac(y_k+1-y_k)s_kxi^2+delta_kxi(1-xi)s_k+delta_k+1+delta_k-2s_kxi(1-xi)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    textwhere quad s_k = s_k(x)= fracy_k+1 - y_kx_k+1-x quad textand quad xi = xi(x) = fracx - x_kx_k+1-x_k","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The spline function f is then defined piece-wise from the segment functions within each bin. The segments of the inverse spline function f^-1 are given by:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    f_k^-1  y_k y_k+1) rightarrow -BB y mapsto x_k + frac(x_k+1-x_k)s_k(xi)^2+delta_kxi(1-xi)s_k+delta_k+1+delta_k-2s_kxi(1-xi)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"where","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    s_k = s_k(y)= fracx_k+1 - y_ky_k+1-y","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    xi = xi(y) = frac2c-b-sqrtb^2-4ac","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    a = a(y) = (y_k+1 - y_k)(s_k - delta_k) + (y-y_k)(delta_k+1+delta_k-2s_k)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    b = b(y) = (y_k+1-y_k)delta_k-(y-y_k)(delta_k+1+delta_k-2s_k)7pt","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    c = c(y) = -s_k(y-y_k)","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The derivative for these functions can also be calculated analytically and are given by:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    fractextdtextdx f_k(x) = fracs_k^2(delta_k+1xi^2+2s_kxi(1-xi)+delta_k(1-xi)^2)(s_k+(delta_k+1+delta_k-2s_k)xi(1-xi))^2 quad textand","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"    fractextdtextdy f_k^-1(y) = frac1fractextdtextdxf_k(x) ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Inside the -B B times -B B interval mask, the spline is characterized by the knots it passes through, as described above. Outside of this mask, f is set to be the identity function textid  mathbbR rightarrow mathbbR x mapsto x, to allow f to act on boundless input while retaining a finite number of parameters. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The outermost knots are set to be at the interval edges (x_1y_1)equiv(-B-B)  (x_Ky_K)equiv(BB) and the corresponding derivatives are set to be 1 to match the derivative of the identity function. Durkan et al. found this to improve the numerical stability of the Flow during training[1]. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"With this construction, 3(K - 1) parameters are needed to fully characterize a spline function f : K + 1 sets of x_k and y_k coordinates for the knots, plus K + 1 derivatives delta_k minus the two fixed sets of coordinates and derivatives for the boundary knots.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"[1]: Conor Durkan, Artur Bekasov, Iain Murray, George Papamakarios Neural Spline Flows. arXiv:1906.04032","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"[2]: Ivan Kobyzev, Simon J.D. Prince, Marcus A. Brubaker. *","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Normalizing Flows: An Introduction and Review of Current Methods*. arXiv:1908.09257","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"[3]: J. A. GREGORY, R. DELBOURGO, Piecewise Rational Quadratic Interpolation to Monotonic Data. DOI:10.1093","category":"page"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#MonotonicSplines.jl","page":"Home","title":"MonotonicSplines.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a high-performance, GPU- and AD-friendly implementation of monotonic spline functions in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The intended use cases is as a building block in Normalizing FLows, resp. parameter transformations in general.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package currently includes the monotonic rational quadratic splines as defined in \"Neural Spline Flows, Durkan et al. 2019\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"MonotonicSplines currently implements rational quadratic splines as decribed in \"Neural Spline Flows, Durkan et al. 2019\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"The splines defined here support the ChangesOfVariables, InverseFunctions and Functors APIs. The splines also come with some custom ChainRulesCore rrule methods to speed up automatic differentiation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package uses KernelAbstractions to provide both GPU and multi-vendor GPU support.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"introduction.md\",\"implementation.md\"]\nDepth = 3","category":"page"},{"location":"implementation/#Implementation","page":"Implementation","title":"Implementation","text":"","category":"section"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"This package is designed to transform batches of samples of a D-dimensional target distribution via spline functions. The samples are stored in matrices, where each column corresponds to a sample with multiple components.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"In the case of rational quadratic spline functions, this package uses the structs RQSpline and InvRQSpline to hold the parameters (widths, heights, and derivatives) that characterize the spline functions used for transformation. These parameters are stored in 3D arrays, allowing the package to handle multiple spline functions for multiple samples simultaneously.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The package leverages the power of parallel computing through the use of KernelAbstractions.jl. This allows the execution of the code in paralell on either a CPU or a GPU, significantly speeding up the transformation process. Thus multiple entries in a target matrix can be transformed in parallel, utilizing multithreading.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"Furthermore, this package uses automatic code differentiation (AD), enabling the calculation of exact gradients. The use may specify a desired AD backend via the  HeterogeneousComputing.jl API. This feature enhances the performance of the package by providing precise and efficient gradient computations, which are crucial for optimization tasks in machine learning.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"In this package, batches of samples with multiple components may be transformed via spline functions.  The samples are stored in n_dims times n_samples matrices. So a column corresponds to a sample with n_dims components, and the matrix holds n_samples samples. ","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The RQSpline and RQSplineInv structs hold the widths, heights, and derivatives parameters that are used to characterize the n_dims times n_samples spline functions used to transform the target input. ","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"widths, heights, and derivatives are K+1 times n_dims times n_samples arrays, with the parameters to characterize a single spline function with K segments in the first dimension.  Along the second dimension, the parameters for n_dims spline functions for a single sample are stored, and along the third dimension the sets splines for differen samples.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The spline function characterized by the parameters in the [:,i,j] entries in the parameter arrays is applied to the [i,j]-th element of a target input matrix x.","category":"page"}]
}
