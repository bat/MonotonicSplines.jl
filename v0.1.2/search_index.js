var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MonotonicSplines]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#MonotonicSplines.MonotonicSplines","page":"API","title":"MonotonicSplines.MonotonicSplines","text":"MonotonicSplines\n\nHigh-performance monotonic splines in Julia.\n\n\n\n\n\n","category":"module"},{"location":"api/#MonotonicSplines.InvRQSpline","page":"API","title":"MonotonicSplines.InvRQSpline","text":"InvRQSpline(widths::AbstractArray{<:Real}, heights::AbstractArray{<:Real}, derivatives::AbstractArray{<:Real})\n\nObject holding the parameters to characterize several inverse rational quadratic spline functions analogous to InvRQSpline.\n\nThe same parameters are used to characterize the forward and inverse spline functions, the struct used to store them decides  the equation they are evaluated in. \n\n\n\n\n\n","category":"type"},{"location":"api/#MonotonicSplines.RQSpline","page":"API","title":"MonotonicSplines.RQSpline","text":"RQSpline(widths::AbstractArray{<:Real}, heights::AbstractArray{<:Real}, derivatives::AbstractArray{<:Real})\n\nObject holding the parameters to characterize several rational quadratic spline functions after the scheme  first defined by Gregory and Delbourgo in https://doi.org/10.1093/imanum/2.2.123. RQSpline holds the parameters to characterize n_dims x n_samples spline functions to transform  each component of n_samples samples.\n\nwidths, heights, and derivatives are K+1 x n_dims x n_samples arrays,  with the parameters to characterize a single spline function with K segments in the first dimension.  Along the second dimension, the spline functions for a single sample are stored, and along the third dimension the sets  splines for differen samples.\n\n\n\n\n\n","category":"type"},{"location":"api/#MonotonicSplines._sort_dimensions-Tuple{AbstractArray, AbstractArray, AbstractVector}","page":"API","title":"MonotonicSplines._sort_dimensions","text":"sort_dimensions(y₁::AbstractArray, y₂::AbstractArray, mask::AbstractVector)\n\nOutput an array identical to y₂, but with the rows specified by mask overwritten with the corresponding rows in y₁.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.eval_forward_rqs_params-NTuple{7, Real}","page":"API","title":"MonotonicSplines.eval_forward_rqs_params","text":"eval_forward_rqs_params(wₖ::Real, wₖ₊₁::Real, hₖ::Real, hₖ₊₁::Real, dₖ::Real, dₖ₊₁::Real, x::Real)\n\nApply a rational quadratic spline segment to x, and calculate the logarithm of the absolute value of this function's jacobian.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.eval_forward_rqs_params_with_grad-Union{Tuple{M3}, Tuple{M2}, Tuple{M1}, Tuple{M0}, Tuple{M0, M0, M1, M1, M2, M2, M3}} where {M0<:Real, M1<:Real, M2<:Real, M3<:Real}","page":"API","title":"MonotonicSplines.eval_forward_rqs_params_with_grad","text":"eval_forward_rqs_params_with_grad(wₖ::Real, wₖ₊₁::Real, hₖ::Real, hₖ₊₁::Real, dₖ::Real, dₖ₊₁::Real, x::Real)\n\nApply a rational quadratic spline segment to x, and calculate the logarithm of the absolute value of this function's jacobian. And calculate the gradient of that function depending on the spline parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.get_params","page":"API","title":"MonotonicSplines.get_params","text":"get_params(θ_raw::AbstractArray, n_dims_trafo::Integer, B::Real = 5.)\n\nProcess the raw output parameters of a neural net to be usable as the widths, heights and derivatives to characterize a set of rational quadratic spline functions. Outputs a tripel w,h,d containing the widths, heights, and derivative parameters, either on the CPU or GPU, depending on the backend of the input θ_raw.\n\nThe θ_raw should be a matrix, with the columns being the raw parameters for a sample. n_dims_trafo is the number of spline functions for which parameters are supposed to be produced. The output parameters are stored in an K+1 x n_spline_functions_per_sample x n_samples array.\n\n\n\n\n\n","category":"function"},{"location":"api/#MonotonicSplines.rqs_backward-Tuple{AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"API","title":"MonotonicSplines.rqs_backward","text":"rqs_backward(x::AbstractArray{<:Real}, w::AbstractArray{<:Real}, h::AbstractArray{<:Real}, d::AbstractArray{<:Real}, w_logJac::AbstractArray{<:Real}, h_logJac::AbstractArray{<:Real}, d_logJac::AbstractArray{<:Real})\n\nApply the inverse rational quadratic spline functions characterized by w, h, and d to x.  The spline function characterized by the parameters in the [:,i,j] entries in trafo is applied to the [i,j]-th element of x.\n\nReturn the transformed values in a matrix y of the same shape as x, and return a 1 x size(x,2) -matrix holding the sums of the values  of the logarithm of the absolute values of the determinant of the jacobians of the spline functions applied to a column of x.\n\nThe function executes in a kernel, on the same backend as x is stored (CPU or GPU), the output will also be returned on the same backend.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_forward-Tuple{AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"API","title":"MonotonicSplines.rqs_forward","text":"rqs_forward(x::AbstractArray{<:Real}, w::AbstractArray{<:Real}, h::AbstractArray{<:Real}, d::AbstractArray{<:Real})\n\nApply the rational quadratic spline functions characterized by w, h, and d to x.  The spline function characterized by the parameters in the [:,i,j] entries in trafo is applied to the [i,j]-th element of x.\n\nReturn the transformed values in a matrix y of the same shape as x, and return a 1 x size(x,2) -matrix holding the sums of the values  of the logarithm of the absolute values of the determinant of the jacobians of the spline functions applied to a column of x.\n\nThe function executes in a kernel, on the same backend as x is stored (CPU or GPU), the output will also be returned on the same backend.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_forward_kernel!-Tuple{Any}","page":"API","title":"MonotonicSplines.rqs_forward_kernel!","text":"rqs_forward_kernel!(x::AbstractArray, y::AbstractArray, logJac::AbstractArray, w::AbstractArray, h::AbstractArray, d::AbstractArray)\n\nApply the rational quadratic spline functions characterized by w, h, and d to x.  The spline function characterized by the parameters in the [:,i,j] entries in trafo is applied to the [i,j]-th element of x.\n\nThe transformed values are stored in y the sums of the values of the logarithm of the absolute values of the determinant  of the jacobians of the spline functions applied to a column of x are stored in the corresponding column of logJac.\n\nTo find the bin k in which the respective x value for a spline falls in, a the corresponding column of w is searched.j\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_forward_pullback-Tuple{AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}, AbstractArray{<:Real}}","page":"API","title":"MonotonicSplines.rqs_forward_pullback","text":"rqs_forward_pullback(x::AbstractArray{<:Real}, w::AbstractArray{<:Real}, h::AbstractArray{<:Real}, d::AbstractArray{<:Real}, tangent_1::AbstractArray, tangent_2::AbstractArray)\n\nReturn the gradients of the spline functions characterized by w, h, and d, evaluated at the values in x. The output will be on the same backend as x and w, h, and d (CPU or GPU).\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.rqs_forward_pullback_kernel!-Tuple{Any}","page":"API","title":"MonotonicSplines.rqs_forward_pullback_kernel!","text":"rqs_forward_pullback_kernel!(\n    x::AbstractArray,\n    y::AbstractArray,\n    logJac::AbstractArray,\n    w::AbstractArray,\n    h::AbstractArray,\n    d::AbstractArray,\n    ∂y∂w_tangent::AbstractArray,\n    ∂y∂h_tangent::AbstractArray,\n    ∂y∂d_tangent::AbstractArray,\n    ∂LogJac∂w_tangent::AbstractArray,\n    ∂LogJac∂h_tangent::AbstractArray,\n    ∂LogJac∂d_tangent::AbstractArray,\n    tangent_1::AbstractArray,\n    tangent_2::AbstractArray,\n)\n\nReturn the gradients of the rational quadratic spline functions characterized by w, h, and d, evaluated at the values in x and of logJac. The output will be on the same backend as x and w, h, and d (CPU or GPU).\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.spline_backward-Tuple{InvRQSpline, AbstractMatrix{<:Real}}","page":"API","title":"MonotonicSplines.spline_backward","text":"spline_backward(trafo::InvRQSpline, x::AbstractMatrix{<:Real})\n\nApply the inverse rational quadratic spline functions characterized by the parameters stored in trafo to the matrix x. The rational quadratic spline function characterized by the parameters in the [:,i,j] entries in trafo is applied to the [i,j]-th element of x.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotonicSplines.spline_forward-Tuple{RQSpline, AbstractMatrix{<:Real}}","page":"API","title":"MonotonicSplines.spline_forward","text":"spline_forward(trafo::RQSpline, x::AbstractMatrix{<:Real})\n\nApply the rational quadratic spline functions characterized by the parameters stored in trafo to the matrix x. The spline function characterized by the parameters in the [:,i,j] entries in trafo is applied to the [i,j]-th element of x.\n\n\n\n\n\n","category":"method"},{"location":"introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"This page provides a summarized explanation of the implementation of the rational quadratic spline functions as defined in [1]. For a comprehensive derivation and explanation of the spline function's usage, see [1] and [2].","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Rational quadratic functions are defined as the quotient of two quadratic polynomials and offer superior flexibility to other function families [1]. They are easily differentiable, and since they are constructed to be monotonous, they also are analytically invertible. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Durkan et al. construct their rational quadratic splines f from K different rational quadratic functions. The parameterization of the splines follows the method of Gregory and Delbourgo [3]. They characterize a spline by the coordinates (x_ky_k)  k = 1  K+1, of the K+1 points called \\textit{knots} in which two adjacent spline segments are joined together. The parameterization also incorporates the K-1 derivatives of the spline at the interior knots. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"limit the number of parameters needed to characterize a spline, they are defined on a finite interval","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"beginalign*\n    f  -B B rightarrow -B B   textwith B in mathbbR\nendalign*","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Here we chose B = 50 by default, but this can be changed arbitrarily. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Gregory and Delbourgo split this -B B input domain into K bins and define each spline segment on one bin. The knots lie on the bin edges on the x-axis and at the desired y value through which the spline is supposed to pass. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"In the k-th bin (1leq k leq K), the respective spline segment f_k is defined as an expression of the coordinates (x_ky_k) and (x_k+1y_k+1) of the enclosing k -th and k+1 -st knots as well as the spline's derivatives delta_k and delta_k+1 at the knots:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"beginalign\n    labeleqrqs\n    f_k  x_k x_k+1) rightarrow -BB x mapsto y_k + frac(y_k+1-y_k)s_kxi^2+delta_kxi(1-xi)s_k+delta_k+1+delta_k-2s_kxi(1-xi)\nendalign","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"beginalign*\n    textwhere quad s_k = s_k(x)= fracy_k+1 - y_kx_k+1-x quad textand quad xi = xi(x) = fracx - x_kx_k+1-x_k\nendalign*","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The spline function f is then defined piece-wise from the segment functions within each bin. The segments of the inverse spline function f^-1 are given by:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"beginflalign*\n    labeleqrqs_inv\n     f_k^-1  y_k y_k+1) rightarrow -BB y mapsto x_k + frac(x_k+1-x_k)s_k(xi)^2+delta_kxi(1-xi)s_k+delta_k+1+delta_k-2s_kxi(1-xi)quad \nendflalign*","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"beginflalign*\n     textwhere\n     s_k = s_k(y)= fracx_k+1 - y_ky_k+1-y\n     xi = xi(y) = frac2c-b-sqrtb^2-4ac\n     a = a(y) = (y_k+1 - y_k)(s_k - delta_k) + (y-y_k)(delta_k+1+delta_k-2s_k)7pt\n     b = b(y) = (y_k+1-y_k)delta_k-(y-y_k)(delta_k+1+delta_k-2s_k)7pt\n     c = c(y) = -s_k(y-y_k)\nendflalign*","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The derivative for these functions can also be calculated analytically and are given by:","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"beginflalign*\n fractextdtextdx f_k(x) = fracs_k^2(delta_k+1xi^2+2s_kxi(1-xi)+delta_k(1-xi)^2)(s_k+(delta_k+1+delta_k-2s_k)xi(1-xi))^2 quad textand\n fractextdtextdy f_k^-1(y) = frac1fractextdtextdxf_k(x) \nendflalign*","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Inside the -B B times -B B interval mask, the spline is characterized by the knots it passes through, as described above. Outside of this mask, f is set to be the identity function id  mathbbR rightarrow mathbbR x mapsto x, to allow f to act on boundless input while retaining a finite number of parameters. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"The outermost knots are set to be at the interval edges (x_1y_1)equiv(-B-B)  (x_Ky_K)equiv(BB) and the corresponding derivatives are set to be 1 to match the derivative of the identity function. Durkan et al. found this to improve the numerical stability of the Flow during training \\cite{neuralsplineflows}. ","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"With this construction, 3(K - 1) parameters are needed to fully characterize a spline function f : K + 1 sets of x_k and y_k coordinates for the knots, plus K + 1 derivatives delta_k minus the two fixed sets of coordinates and derivatives for the boundary knots.","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"[1]: Conor Durkan, Artur Bekasov, Iain Murray, George Papamakarios Neural Spline Flows. arXiv:1906.04032","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"[2]: Ivan Kobyzev, Simon J.D. Prince, Marcus A. Brubaker. *","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"Normalizing Flows: An Introduction and Review of Current Methods*. arXiv:1908.09257","category":"page"},{"location":"introduction/","page":"Introduction","title":"Introduction","text":"[3]: J. A. GREGORY, R. DELBOURGO, Piecewise Rational Quadratic Interpolation to Monotonic Data. DOI:10.1093","category":"page"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#MonotonicSplines.jl","page":"Home","title":"MonotonicSplines.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a high-performance, GPU- and AD-friendly implementation of monotonic spline functions in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The intended use cases is as a building block in Normalizing FLows, resp. parameter transformations in general.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package currently includes the monotonic rational quadratic splines as defined in \"Neural Spline Flows, Durkan et al. 2019\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"MonotonicSplines currently implements rational quadratic splines as decribed in \"Neural Spline Flows, Durkan et al. 2019\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"The splines defined here support the ChangesOfVariables, InverseFunctions and Functors APIs. The splines also come with some custom ChainRulesCore rrule methods to speed up automatic differentiation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package uses KernelAbstractions to provide both GPU and multi-vendor GPU support.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"introduction.md\",\"implementation.md\"]\nDepth = 3","category":"page"},{"location":"implementation/#Implementation","page":"Implementation","title":"Implementation","text":"","category":"section"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"In this package, batches of samples with multiple components may be transformed via spline functions.  The samples are stored in n_dims times n_samples matrices. So a column corresponds to a sample with n_dims components, and the matrix holds n_samples samples. ","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The RQSpline and RQSplineInv structs hold the widths, heights, and derivatives parameters that are used to characterize the n_dims times n_samples spline functions used to transform the target input. ","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"widths, heights, and derivatives are K+1 times n_dims times n_samples arrays, with the parameters to characterize a single spline function with K segments in the first dimension.  Along the second dimension, the parameters for n_dims spline functions for a single sample are stored, and along the third dimension the sets splines for differen samples.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The spline function characterized by the parameters in the [:,i,j] entries in the parameter arrays is applied to the [i,j]-th element of a target input matrix x.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The application of the spline functions to a target matrix is performed via kernels defined with KernelAbstractions.jl. This allows for the execution of this code on either a CPU or a GPU, speeding up the transformation process.","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"Thus, several entries in a target matrix may be transformed in paralell, using multithreading. ","category":"page"},{"location":"implementation/","page":"Implementation","title":"Implementation","text":"The code is also automatically differentiable (via Zygote.jl), allowing for the calculation of exact gradients. ","category":"page"}]
}
